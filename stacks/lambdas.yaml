AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    Microservice:
        Type: String
    LogLevel:
        Type: String
        AllowedValues:
          - error
          - warn
          - log
          - info
          - verbose
          - debug
          - silent
    KeyArn:
        Type: String
    DefaultEmail:
        Type: String
Globals:
    Function:
        Timeout: 60
        Runtime: nodejs20.x
        Environment:
            Variables:
                STAGE: !Ref Stage
                TENANT: !Ref Tenant
                REGION: !Ref AWS::Region
                ACCOUNT_NUMBER: !Ref AWS::AccountId
                MICROSERVICE: !Ref Microservice
                KEY_ARN: !Ref KeyArn
                SES_DEFAULT_EMAIL: !Ref DefaultEmail
                LOG_LEVEL: !Ref LogLevel

Resources:
    ################################################################################################
    #                                          SEND EMAIL                                          # 
    ################################################################################################  

    SendEmailLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Stage}-${Tenant}-${Microservice}-send-email
            Role: !GetAtt LambdaRole.Arn
            CodeUri: ./../dist/handlers
            Handler: sendEmail.sendEmail
            VpcConfig:
                SubnetIds: !Split [',', {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnets-list"}]
                SecurityGroupIds:
                  - {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-public-subnet-security-group-id"}
                  - {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnet-security-group-id"}
            Tags:
                Service: Serverless
                Resource: Function
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-send-email
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant
            Environment:
                Variables:
                    LOG_LEVEL: !Ref LogLevel
            Events:
                SQSEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SendEmailSQS.Arn
                        BatchSize: 1
            Tracing: PassThrough

    LambdaLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /aws/lambda/${SendEmailLambda}
            RetentionInDays: 1
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/lambda/${SendEmailLambda}
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    SendEmailSQS:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${Stage}-${Tenant}-${Microservice}-send-email-sqs
            DelaySeconds: 0
            VisibilityTimeout: 60
            ReceiveMessageWaitTimeSeconds: 1
            RedrivePolicy:
                deadLetterTargetArn: !GetAtt SendEmailDLQ.Arn
                maxReceiveCount: 5
            Tags:
              - Key: Service
                Value: SQS
              - Key: Resource
                Value: Queue
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-sqs
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    SendEmailDLQ:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${Stage}-${Tenant}-${Microservice}-send-email-dlq
            DelaySeconds: 0
            VisibilityTimeout: 60
            ReceiveMessageWaitTimeSeconds: 1
            Tags:
              - Key: Service
                Value: SQS
              - Key: Resource
                Value: Queue
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-dlq
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    LambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${AWS::StackName}-lambda-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service:
                          - "lambda.amazonaws.com"
                          - "events.amazonaws.com"
                    Action:
                      - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
              - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
            Policies:
              - PolicyName: !Sub ${AWS::StackName}
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                          - lambda:PublishVersion
                          - lambda:InvokeFunction
                          - apigateway:*
                          - kms:GetPublicKey
                          - kms:Decrypt
                          - ses:GetTemplate
                          - ses:SendTemplatedEmail
                          - ses:SendEmail
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${AWS::StackName}-lambda-role
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
