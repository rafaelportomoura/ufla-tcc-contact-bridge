AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    Microservice:
        Type: String
    ApiBasePath:
        Type: String
    MinContainers:
        Type: Number
        Description: Min containers to scale to
        Default: 1
    MaxContainers:
        Type: Number
        Description: Max containers to scale to
        Default: 1
    ScaleOutCooldown:
        Type: Number
        Description: Scaling down policy cool down in seconds
    ScaleInCooldown:
        Type: Number
        Description: Scaling up policy cool down in seconds
    CPUUtilization:
        Type: String
        Description: Use of cpu to auto scale
    Image:
        Type: String
        Description: ECR Image
    LogLevel:
        Type: String
        AllowedValues:
          - error
          - warn
          - log
          - info
          - verbose
          - debug
    ListenerArn:
        Type: String


Conditions:
    isProd: !Equals [!Ref Stage, prod]


Globals:
    Function:
        Timeout: 900
        Runtime: nodejs20.x
        Environment:
            Variables:
                STAGE: !Ref Stage
                TENANT: !Ref Tenant
                REGION: !Ref AWS::Region
                ACCOUNT_NUMBER: !Ref AWS::AccountId
                MICROSERVICE: !Ref Microservice
                KEY_ARN: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-${Microservice}-encrypt-key-arn"}
                SES_DEFAULT_EMAIL: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-email-identity"}
Resources:
    # -----------------------------------------------
    # API 
    # -----------------------------------------------
    Integration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref Api
            IntegrationType: HTTP_PROXY
            IntegrationMethod: ANY
            IntegrationUri: !Ref ListenerArn
            ConnectionType: VPC_LINK
            ConnectionId:
                Fn::ImportValue: !Sub ${Stage}-${Tenant}-vpc-link-id
            PayloadFormatVersion: "1.0"
            RequestParameters:
                append:header.microservice: !Ref Microservice
                overwrite:path: '$request.path'

    Route:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: $default
            Target: !Sub integrations/${Integration}
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref Authorizer

    RouteOptions:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: OPTIONS /{proxy+}
            Target: !Sub integrations/${Integration}
            AuthorizationType: NONE

    Api:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-api
            ProtocolType: HTTP
            CorsConfiguration:
                AllowCredentials: false
                AllowHeaders:
                  - '*'
                AllowMethods:
                  - '*'
                AllowOrigins:
                  - '*'
                ExposeHeaders:
                  - '*'
                MaxAge: 0
            Tags:
                Service: ApiGatewayV2
                Resource: Api
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-api
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant

    ApiMapping:
        Type: AWS::ApiGatewayV2::ApiMapping
        Properties:
            ApiId: !Ref Api
            ApiMappingKey: !Ref ApiBasePath
            DomainName:
                Fn::ImportValue: !Sub ${Stage}-${Tenant}-api-gateway-domain-name
            Stage: !Ref ApiStage

    ApiDeployment:
        DependsOn: Route
        Type: AWS::ApiGatewayV2::Deployment
        Properties:
            ApiId: !Ref Api

    ApiStage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            ApiId: !Ref Api
            DeploymentId: !Ref ApiDeployment
            StageName: !Ref Stage
            Tags:
              - Key: Service
                Value: ApiGatewayV2
              - Key: Resource
                Value: Stage
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-api-stage
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    Authorizer:
        Type: AWS::ApiGatewayV2::Authorizer
        Properties:
            Name: LambdaAuthorizer
            ApiId: !Ref Api
            AuthorizerType: REQUEST
            AuthorizerUri: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-api-gateway-authorizer-uri"}
            AuthorizerPayloadFormatVersion: '2.0'
            AuthorizerResultTtlInSeconds: 0
            IdentitySource:
              - $request.header.Authorization

    LambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: authorizer
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/authorizers/${Authorizer}

    # -----------------------------------------------
    # App Mesh
    # -----------------------------------------------
    VirtualNode:
        Type: AWS::AppMesh::VirtualNode
        Properties:
            MeshName:
                Fn::ImportValue: !Sub ${Stage}-${Tenant}-app-mesh-arn
            VirtualNodeName: !Sub "${Microservice}-virtual-node"
            Spec:
                Listeners:
                  - PortMapping:
                        Port: 80
                        Protocol: http
                  - PortMapping:
                        Port: 443
                        Protocol: https
                ServiceDiscovery:
                    AWSCloudMap:
                        NamespaceName: !Ref ApiBasePath
                        ServiceName: !Sub "${Microservice}-service"


    # -----------------------------------------------
    # Cluster
    # -----------------------------------------------
    Cluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Sub ${Stage}-${Tenant}-${Microservice}-cluster
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: Cluster
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-cluster
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # ---------------------------------------------
    # LOAD BALANCER
    # ---------------------------------------------
    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}
            HealthCheckPath: "/health-check"
            Port: 80
            Protocol: HTTP
            TargetGroupAttributes:
              - Key: deregistration_delay.timeout_seconds
                Value: '60'
            TargetType: ip
            VpcId:
                Fn::ImportValue: !Sub ${Stage}-${Tenant}-vpc-id
            Tags:
              - Key: Service
                Value: ElasticLoadBalancingV2
              - Key: Resource
                Value: TargetGroup
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # ---------------------------------------------
    # FARGATE
    # ---------------------------------------------
    TaskRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-task-role
            AssumeRolePolicyDocument:
                Statement:
                  - Effect: Allow
                    Principal:
                        Service: "ecs-tasks.amazonaws.com"
                    Action: "sts:AssumeRole"
            Policies:
              - PolicyName: task-policy
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - kms:GetPublicKey
                          - kms:Decrypt
                          - ses:GetTemplate
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-task-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    ExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-execution-role
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                          - ec2.amazonaws.com
                          - ecs.amazonaws.com
                          - ecs-tasks.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
            Path: /
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
              - arn:aws:iam::aws:policy/AmazonECS_FullAccess
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-execution-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant


    # ---------------------------------------------
    # FARGATE
    # ---------------------------------------------

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            RetentionInDays: !If
              - isProd
              - !Ref AWS::NoValue
              - 1
            LogGroupName: !Sub /aws/ecs/services/${Stage}-${Tenant}-${Microservice}
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/ecs/services/${Stage}-${Tenant}-${Microservice}
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Sub ${Stage}-${Tenant}-${Microservice}
            ContainerDefinitions:
              - Name: !Sub ${Stage}-${Tenant}-${Microservice}-http
                PortMappings:
                  - ContainerPort: 80
                    HostPort: 80
                    Protocol: tcp
                Environment:
                  - Name: ACCOUNT_ID
                    Value: !Ref AWS::AccountId
                  - Name: STAGE
                    Value: !Ref Stage
                  - Name: REGION
                    Value: !Ref AWS::Region
                  - Name: TENANT
                    Value: !Ref Tenant
                  - Name: LOG_LEVEL
                    Value: !Ref LogLevel
                  - Name: MICROSERVICE
                    Value: !Ref Microservice
                  - Name: KEY_ARN
                    Value: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-${Microservice}-encrypt-key-arn"}
                Image: !Ref Image
                LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref LogGroup
                        awslogs-stream-prefix: !Sub ${Stage}-${Tenant}-${Microservice}-http
                        awslogs-region: !Ref AWS::Region
                Essential: true
              - Name: envoy
                Image: public.ecr.aws/appmesh/aws-appmesh-envoy:v1.15.1.0-prod
                Essential: true
                Environment:
                  - Name: APPMESH_VIRTUAL_NODE_NAME
                    Value: !Sub
                      - "mesh/${AppMeshName}/virtualNode/${VirtualNodeName}"
                      - AppMeshName:
                            Fn::ImportValue: !Sub ${Stage}-${Tenant}-app-mesh-name
                        VirtualNodeName: !GetAtt VirtualNode.VirtualNodeName
                  - Name: AWS_REGION
                    Value: !Ref AWS::Region
                User: 1337
                PortMappings:
                  - ContainerPort: 9901
                    Protocol: tcp
            Cpu: 256
            Memory: 512
            ExecutionRoleArn: !GetAtt ExecutionRole.Arn
            TaskRoleArn: !GetAtt TaskRole.Arn
            NetworkMode: awsvpc
            RequiresCompatibilities:
              - FARGATE
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: TaskDefinition
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-http
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    Service:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref Cluster
            DesiredCount: !Ref MinContainers
            LaunchType: FARGATE
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
              - ContainerName: !Sub ${Stage}-${Tenant}-${Microservice}-http
                ContainerPort: 80
                TargetGroupArn: !Ref TargetGroup
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: DISABLED
                    SecurityGroups:
                      - Fn::ImportValue: !Sub "${Stage}-${Tenant}-private-subnet-security-group-id"
                    Subnets: !Split [',', {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnets-list"}]
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: Service
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-http
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # -----------------------------------------------------------
    #  AUTO SCALING
    # -----------------------------------------------------------

    AutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                          - ecs-tasks.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
            Path: "/"
            Policies:
              - PolicyName: root
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - ecs:DescribeServices
                          - ecs:UpdateService
                          - cloudwatch:DeleteAlarms
                          - cloudwatch:DescribeAlarms
                          - cloudwatch:PutMetricAlarm
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    AutoScalingTarget:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        Properties:
            MinCapacity: !Ref MinContainers
            MaxCapacity: !Ref MaxContainers
            ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs
            RoleARN: !GetAtt AutoScalingRole.Arn

    AutoScalingPolicy:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-policy
            PolicyType: TargetTrackingScaling
            ScalingTargetId: !Ref AutoScalingTarget
            TargetTrackingScalingPolicyConfiguration:
                PredefinedMetricSpecification:
                    PredefinedMetricType: ECSServiceAverageCPUUtilization
                ScaleInCooldown: !Ref ScaleInCooldown
                ScaleOutCooldown: !Ref ScaleOutCooldown
                TargetValue: !Ref CPUUtilization


    ################################################################################################
    #                                          SEND EMAIL                                          # 
    ################################################################################################  

    SendEmailLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Stage}-${Tenant}-${Microservice}-send-email
            Role: !GetAtt LambdaRole.Arn
            CodeUri: ./../dist/handlers
            Handler: sendEmail.sendEmail
            VpcConfig:
                SubnetIds: !Split [',', {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnets-list"}]
                SecurityGroupIds:
                  - {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-public-subnet-security-group-id"}
                  - {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnet-security-group-id"}
            Tags:
                Service: Serverless
                Resource: Function
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-send-email
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant
            Environment:
                Variables:
                    LOG_LEVEL: !Ref LogLevel
            Events:
                SQSEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SendEmailSQS.Arn
                        BatchSize: 1
            Tracing: PassThrough

    LambdaLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /aws/lambda/${SendEmailLambda}
            RetentionInDays: 1
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/lambda/${SendEmailLambda}
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    SendEmailSQS:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${Stage}-${Tenant}-${Microservice}-send-email-sqs
            DelaySeconds: 0
            VisibilityTimeout: 900
            ReceiveMessageWaitTimeSeconds: 1
            RedrivePolicy:
                deadLetterTargetArn: !GetAtt SendEmailDLQ.Arn
                maxReceiveCount: 5
            Tags:
              - Key: Service
                Value: SQS
              - Key: Resource
                Value: Queue
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-sqs
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    SendEmailDLQ:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${Stage}-${Tenant}-${Microservice}-send-email-dlq
            DelaySeconds: 0
            VisibilityTimeout: 900
            ReceiveMessageWaitTimeSeconds: 1
            Tags:
              - Key: Service
                Value: SQS
              - Key: Resource
                Value: Queue
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-dlq
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    LambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-lambda-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service:
                          - "lambda.amazonaws.com"
                          - "events.amazonaws.com"
                    Action:
                      - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
              - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
            Policies:
              - PolicyName: !Sub ${Stage}-${Tenant}-${Microservice}
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                          - lambda:PublishVersion
                          - lambda:InvokeFunction
                          - apigateway:*
                          - kms:GetPublicKey
                          - kms:Decrypt
                          - ses:GetTemplate
                          - ses:SendTemplatedEmail
                          - ses:SendEmail
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-lambda-role
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
